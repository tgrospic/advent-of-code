on: [push]

name: Build and Test ðŸš€

jobs:
  rust:
    name: Run Rust tests
    runs-on: ubuntu-latest
    env:
      # Enable sccache build optimization
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust with rustfmt
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-targets: true
    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.6
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Run tests with Cargo
      run: cargo test

  fsharp:
    name: Run F# tests
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
    - name: Run tests with DotNet (trx logger)
      run: dotnet test -l trx
    - name: Show test results with trx
      continue-on-error: true
      if: always()
      run: |
        dotnet tool install -g dotnet-trx
        trx

  purescript:
    name: Run PureScript tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: purescript-contrib/setup-purescript@main
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-spago-${{ hashFiles('**/*.dhall') }}
        path: |
          .spago
          output
    - name: Run tests with Spago
      run: spago test

  haskell:
    name: Run Haskell tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: haskell-actions/setup@v2
      id: setup
      with:
        ghc-version: '9.10'
        cabal-version: '3.12'

    - name: Cache dist directory
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-cabal-dist-${{ hashFiles('**/*.cabal') }}
        path: dist-newstyle

    # https://github.com/haskell-actions/setup?tab=readme-ov-file#model-cabal-workflow-with-caching
    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-cabal-${{ hashFiles('**/*.cabal') }}
        restore-keys: ${{ env.key }}-
    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      run: cabal build all --only-dependencies --enable-tests
    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v4
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Run tests with Cabal
      run: cabal test
